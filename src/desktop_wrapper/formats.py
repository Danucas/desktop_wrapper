BASE_INDEX_HTML = """
<!DOCTYPE html>
<html>
<head>
<title></title>
<!-- React Packages -->
<script
    src="{{{{ url_for('static', filename='js/packages/babel.min.js') }}}}" crossorigin></script>
<script
    src="{{{{ url_for('static', filename='js/packages/react.js') }}}}" crossorigin></script>
<script 
    src="{{{{ url_for('static', filename='js/packages/react_dom.js') }}}}" crossorigin></script>

<!-- SOS -->

<!-- EOS -->


<!-- Application React Components -->

<script 
    type="text/babel"
    data-plugins="transform-modules-umd"
    data-type="module"
    data-presets="react"
    src="{{{{ url_for('static', filename='js/functions.js') }}}}"></script>


<script 
    type="text/babel"
    data-plugins="transform-modules-umd"
    data-type="module"
    data-presets="react"
    src="{{{{ url_for('static', filename='js/App.js') }}}}"></script>


<script 
    type="text/babel"
    data-plugins="transform-modules-umd"
    data-type="module"
    data-presets="react"
    src="{{{{ url_for('static', filename='js/index.js') }}}}"></script>

<!-- Static and style files -->
<link rel="stylesheet" href="{{{{ url_for('static', filename='css/index.css') }}}}">


</head>
<body>
    <div id="root"></div>
</body>
</html>
"""


BASE_INDEX_JS_IMPORTS = """
/*
Auto Generated imports for the pywebview.api binded methods
Please do not modify them.
*/
import {{ {functions} }} from "./assets/js/functions.js";

// EOI
"""

BASE_INDEX_JS = """
import { App } from "./App";

const e = React.createElement;

function createApp() {
    let root = document.getElementById('root');
    const reactRoot = ReactDOM.createRoot(root);
    reactRoot.render(e(App));
}

createApp();
"""

BASE_INDEX_CSS = """
:root {
    --primary: rgb(77, 23, 172);
    --primary-shadow: rgb(20, 0, 55);
}

body {
    background-color: var(--primary-shadow);
    font-family: sans-serif;
    box-sizing: border-box;
    overflow: hidden;
}


button {
    cursor: pointer;
    padding: 4px 12px;
    border: none;
    background-color: var(--primary);
    border-radius: 4px;
}

button:hover {
    background-color: white;
    color: var(--primary);
}

img {
    width: 20vw;
    height: 20vw;
    margin-left: calc(50% - 10vw);
    margin-top: 20vh;
    box-sizing: border-box;
}

h1 {
    box-sizing: border-box;
    font-size: 14px;
    width: 90vw;
    margin: 12px calc(5vw - 6px);
    padding: 0;
    text-align: center;
    color: white;
    font-weight: normal;
}

p {
    box-sizing: border-box;
    font-size: 14px;
    width: 90vw;
    margin: 12px calc(5vw - 6px);
    padding: 0;
    text-align: center;
    color: white;
    font-weight: normal;
}

.container {
    justify-content: center;
    align-items: center;
}

.function {
    border-radius: 6px;
    padding: 6px 8px;
    width: fit-content;
    font-weight: normal;
}


.functions-container {
    position: absolute;
    left: 0;
    bottom: 0;
    display: flex;
    padding-bottom: 12px;
    justify-items: center;
    align-items: center;
}

.functions-container h1 {
    width: fit-content;
    padding: 4px 24px;
    color: var(--primary);
}
"""


BASE_REACT_JS = """
/*
App is the entry point for the React App
use FunctionsList and FunctionsComponent to trigger the Python functions
*/

import { FunctionsMap } from './functions.js';

class App extends React.Component {
    constructor(props) {
        super(props);
    }

    render() {
        return (
            <div className="container">
                <img></img>
                <h1>Thanks for using Desktop Wrapper</h1>
                <p>Start Developing now!</p>
                <div className="functions-container">
                    <h1>Custom Functions</h1>
                    {
                        Object.entries(FunctionsMap).map(([funcName, func])=>{
                            return (<p className="function">{funcName}</p>)
                        })
                    }
                </div>
            </div>
        )
    }
}

export {
    App
}
"""

custom_function_template = """/*
Autogenerated File, any change will be overwriten at reload
TODO:
    Add a way to block modifications when Debugging
*/
async function {name}Interface({params}) {{
    try {{
        console.log(pywebview);
        let res = await pywebview.api.{python_name}({params});
        return res;
    }} catch (err) {{
        let res = await fetch('/api/v1/{name}', {{
            method: 'POST',
            headers: {{ 'Content-Type': 'application/json' }},
            body: JSON.stringify({{values: [{params}]}})
        }});
        if (res.status == 200) {{
            return (await res.json()).response;
        }}
    }}
}}

export {{
    {name}Interface
}}
"""


functions_js_template = """/*
Auto Generated File
Do not modify this file, it could break the app
List of Available custom functions imported from the Autogenerated interfaces
*/
{imports}

{api_binds}

const FunctionsMap = {{
    {func_binds}
}}


export {{
    {exports},
    FunctionsMap
}}
"""

HTML_SCRIPT_TAGS_TEMPLATE = """
<script
    type="text/babel"
    data-plugins="transform-modules-umd"
    data-type="module"
    data-presets="react"
    src="{{{{ url_for('static', filename='js/generated/{func}.js') }}}}"></script>
"""
